%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%        1         2         3         4         5         6         7         8

\documentclass[letterpaper, 10 pt, conference]{ieeeconf}  % Comment this line out
                                                          % if you need a4paper
%\documentclass[a4paper, 10pt, conference]{ieeeconf}      % Use this line for a4
                                                          % paper

\IEEEoverridecommandlockouts                              % This command is only
                                                          % needed if you want to
                                                          % use the \thanks command
\overrideIEEEmargins
% See the \addtolength command later in the file to balance the column lengths
% on the last page of the document



% The following packages can be found on http:\\www.ctan.org
\usepackage{graphics} % for pdf, bitmapped graphics files
%\usepackage{epsfig} % for postscript graphics files
%\usepackage{mathptmx} % assumes new font selection scheme installed
%\usepackage{times} % assumes new font selection scheme installed
%\usepackage{amsmath} % assumes amsmath package installed
\usepackage{amssymb}  % assumes amsmath package installed
\usepackage[utf8]{inputenc}
\usepackage[colorlinks,citecolor=red,urlcolor=blue,bookmarks=false,hypertexnames=true]{hyperref}
%\usepackage{amsthm}
\usepackage{varwidth} 
\usepackage{linegoal} 
\usepackage{POE}
\usepackage{amssymb} 
\usepackage{gensymb}
%\usepackage{dsfont} 
\usepackage{stmaryrd}
\usepackage{comment} 
\usepackage{graphicx}
\usepackage[textsize=tiny,textwidth=\marginparwidth]{todonotes}
\usepackage{url} 
\usepackage{NewItMathFont}
\renewcommand*{\mprintsingle}[2]{\mathsf{#1}}%
\renewcommand*{\mprintmulti}[2]{\mathit{#1}}%
\let\labelindent\relax
\usepackage[inline]{enumitem} 
\usepackage{wrapfig}
\usepackage{collectbox}
\usepackage{gensymb}
\usepackage{listings}
\definecolor{lightgray}{rgb}{0.98,0.98,0.98}
\renewcommand{\ttdefault}{pcr}

\lstset {
  language=xml,
  basicstyle={\footnotesize\ttfamily},
  numbers=none,
  backgroundcolor=\color{lightgray},
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  keywordstyle={\bfseries\color{Blue}},
  commentstyle={\color{Red}\textit},
  stringstyle=\color{Magenta},
  frame=single,
  breaklines=true,
  breakatwhitespace=true,
  tabsize=4,
  morekeywords={rdf,rdfs,owl}  % <-- adding custom keywords
}

\newtheorem{example}{Example}

\makeatletter \newcommand{\mybox}{%
  \collectbox{%
    \setlength{\fboxsep}{1pt}%
    \fbox{\BOXCONTENT}%
  }%
}

\title{\LARGE \bf
POE-$\Delta$ integration in a hybrid modelling context
}

%\author{ \parbox{3 in}{\centering Huibert Kwakernaak*
%         \thanks{*Use the $\backslash$thanks command to put information here}\\
%         Faculty of Electrical Engineering, Mathematics and Computer Science\\
%         University of Twente\\
%         7500 AE Enschede, The Netherlands\\
%         {\tt\small h.kwakernaak@autsubmit.com}}
%         \hspace*{ 0.5 in}
%         \parbox{3 in}{ \centering Pradeep Misra**
%         \thanks{**The footnote marks may be inserted manually}\\
%        Department of Electrical Engineering \\
%         Wright State University\\
%         Dayton, OH 45435, USA\\
%         {\tt\small pmisra@cs.wright.edu}}
%}

\author{Georgi Markov$^{1, 2}$ and Jon G. Hall$^{2}$ and Lucia Rapanotti$^{2}$% <-this % stops a space
\thanks{*This work was not supported by any organization}% <-this % stops a space
\thanks{$^{1}$Siemens Corporate Technology,
        Princeton, NJ 08540, USA
        {\tt\small georgi.markov at siemens.com}}%
\thanks{$^{2}$ Open University, Milton Keynes, MK7 6BJ, United Kingdom
        {\tt\small \{georgi.markov, jon.hall, lucia.rapanotti\} at open.ac.uk}}%
}


\begin{document}

\maketitle
\thispagestyle{empty}
\pagestyle{empty}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{abstract}
- first time a formal change management technique has been applied in a formal context
- applying formal methods to change management

JR Tileki 
TBD

\end{abstract}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{INTRODUCTION}
\begin{itemize}
    \item Statement of the Problem
    \item Type of Research \& Research Methodology ??
    \item Review of Related Literature
Look Najun's paper's literature work
    \item Scope and Limitations
    \item Significance of the Study
\end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Background}
\subsubsection{POE-$\Delta$}
\label{subsec:poedelta}
\POE{}, defined by the second and third authors, is an engineering
framework with an accumulated body of work spanning over a decade,
including application and evaluation through a number of real-world
engineering case studies. Its underlying design theory concerns the
characterization of individual problems and how problems relate and
transform to other problems as part of problem solving processes.

\POE{}-$\Delta$ \cite{doi:10.1002/sres.2533} is a recent extension to POE which shares and expands on a number of \POE{}'s characteristics, including elements of its semantics; its graphical notations; and its underlying process pattern \cite{Hall2009JAdvSysMeas}. However, while \POE{} deals with
`greenfield' development, \POE{}-$\Delta$ deals with change, or
`brownfield,' problems which are solved not solely by the design of a
new artifact, but by a change of, and addition to, existing artifacts
within a target context (a system, product, process, etc).

A thorough presentation of POE and POE-$\Delta$ is beyond the scope of
this paper, but can be found in \cite{doi:10.1002/sres.2533}. Here, we very briefly recall some basic definitions and concepts important in the context of this paper.

In POE a problem is ``a stakeholder's recognized need in context.''
For stakeholder $G$, with recognized need $N_G$ in real world context
$E_G$, we defined their problem to be the pair:
%
\[(E_G,N_G)\]
%

$E_G$ and $N_G$ are to be understood only as place holders, as $G$'s
initial conceptualization of their problem may have neither solution
nor sense. Irrespective of sense or solution existence, $G$'s wish
becomes a challenge to designer $D$ to make sense of $G$'s problem by
finding an agreed environment $E$ and need $N$, leading to $D$'s
problem
%
\[E(S)\meets_{G}N\]
%
which reads ``Find $S$ which, when installed in $E$, meets $N$ to the
satisfaction of $G$.''

$D$'s challenge consists of all the solving problems activities that
lead to the solution of $G$'s problem. Someway through problem solving
we encounter $D$'s variously detailed $E$, $N$ and $S$ and form a
judgement as to whether a problem has been solved. We do this by
creating a solution for it through a sequence of judgement-preserving
transformations, i.e., transformations that the relevant stakeholders
would agree preserved solvability, that move a problem to known solved
problems. Thus, a problem is solved if and only if it can be
transformed to known solved problems. As part of the transformation
sequence, a solution to the problem is created.

In POE-$\Delta$, we begin from the same place as \POE{}: we suppose
that change problem owner $G$ recognizes a need in the real world and
wishes that need to be satisfied. From $G$'s perspective, then, a
problem $P$ is a pair, consisting of a real world context $E_G$ and a
need $N_G$.


Irrespective of sense or solution existence, we will assume that $G$'s
wish becomes a challenge to a change engineer $D$ to make sense of
$G$'s change problem $(E_G,N_G)$ and to solve it. $D$'s challenge thus
consists of (cf. \cite{hall2016a-design}):
%
\begin{enumerate}[label=CPS\arabic*.]
  % \begin{enumerate}
\item creating their own view, $(E, N)$, of the $G$'s change problem
  $(E_G, N_G)$, and identifying domains that must remain unchanged, those that can change;
\item receiving validation from $G$ that $(E, N)$ is properly
  representative;
\item either, identifying a new environment $F$ satisfying the change need which 
\begin{enumerate}[label=\roman*.]
\item preserves those  parts of $E$ that should remain unchanged, 
\item identifies any changes necessary to domains that can change, and 
\item identifies any additional domains necessary to effect the change;
\end{enumerate}
or reporting that the change isn't possible.
\item receiving validation from $G$ that $F$ meets the agreed
  recognised changed need $N$;
\item migrating from $E$ to $F$.
\end{enumerate}

Like \POE{} \cite{hall2016a-design}, even if expressed linearly as
bullet points, the challenge facing $D$ may be iterative and highly
non-linear.

Although $E_G$ and $N_G$ are expressed in stakeholder language, here we assume that the developer has access to a full formal tool box and is able to express both $E$ and $N$ in a suitable formal language. For this paper, we assume that language is Hybrid CSP \cite{chaochen1996formal}.

\subsubsection{The Mechanism Description Language and the Phenomenal Model}
\label{subsubsec:mdl}
\todo[inline]{How do we integrate divere disciptions on a semantic level?}
\begin{itemize}
    \item Phenomenal Basis for Hybrid Modelling
	\item Naijun Zhan - From HCSP to Simulink paper
    \item etc.
\end{itemize}

\subsubsection{HCSP}
Hybrid CSP is an extension of Hoare's original CSP calculus \cite{hoare1978communicating, hoare1985communicating} to provide the necessary constructs for modeling continuous, communicating and real-time behavior as exhibited by many hybrid systems (systems whose behavior combines continuous and discrete dynamic), including but not limited to:
\begin{itemize}
	\item Differential equations to model continuous evolution, including the ability to preempt the evolution by events.
	\item Different types of events and interruptions to enable modeling interactions between continuous evolutions and discrete jumps.
	\item Event communication to enable interaction among processes.
\end{itemize}
While a thorough description of HCSP vocabulary can be found in Chaochen et al's original work \cite{chaochen1996formal}, here we discuss a few of the HCSP constructs on a small example, which combines a number of primitives - input, output, assignment) and some composite operators - sequential and parallel process execution into the following more complex expression:

\[ch!5 || (ch?x; y := x)\]

We break the expression into its constituent HCSP simple terms:
\begin{itemize}
	\item Channel Output: $ch!5$
	\item Channel Input: $ch?x$
	\item Value assignment: $y:=x$
\end{itemize}

Each such HCSP term's semantic is briefly discussed in the following and it is shown how such HCSP simple terms can be represented and how using the Phenomenal Model defined on top of the Mechanism Description Language presented in \ref{subsubsec:mdl} we can integrate these HCSP terms into our POE-$\Delta$ calculus.

\paragraph{The channel output: ch!5}

In \cite{chaochen1996formal}, the semantics of $ch!5$ are
defined as:
\[\footnotesize\begin{array}{rcll}
                 \llbracket ch!x \rrbracket C \triangleq && wait(\alpha, ch!) \wedge keep \\
                                                         &&\vee \\
                                                         && (wait(\alpha, ch!) \wedge keep) \frown syn(\alpha, ch!, x) \frown C
               \end{array}\]

The following two diagrams \ref{fig:ChannelOutput} provide a visual
representation of these semantics: 

\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/ChannelOutput}}
  \caption{Graphical depiction of the HCSP channel output semantics}
  \label{fig:ChannelOutput}
\end{figure}

Each diagram presents one of the two cases which satisfy the $ch!5$
semantics. The top diagram depicts the case where $ch!$ it is willing to
communicate (returns $true$ - tt.), while the $ch?$ term returns
$false$- ff., meaning it is unwilling to communicate. In this case the behavior of $ch!5$ is characterized by $wait \wedge keep$ and the value on the channel $ch$
is irrelevant.

The bottom diagram, shows the second case, which satisfies the $ch!5$
semantics. It subdivides the $[c, d]$ interval in 3 phases:
\begin{itemize}
\item The first interval segment is analogous to the first diagram -
  $wait \wedge keep$. In the second segment, the value
  of $ch?$ turns to true - tt., meaning that now both - $ch!$
  and $ch?$ are willing to communicate, so we move to the $syn$-phase,
  where the value on the channel $ch$ is send to $x$.
\item The last phase of the interval describes the continuation
  sequence - $C$.
\end{itemize}

The POE/POE-$\Delta$ representation of the ch!5 term is the
\mybox{ch!5} HCSP domain with the following semantic: $\llbracket
ch!5\rrbracket \lceil \rceil$.


\paragraph{The channel input: ch?x}
The next diagram pair \ref{fig:ChannelInput} depicts the second term
in our example - $ch?x$:

\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/ChannelInput}}
  \caption{Graphical depiction of the HCSP channel input semantics}
  \label{fig:ChannelInput}
\end{figure}

Analogous to \ref{fig:ChannelOutput}, this diagram pair discusses the
two cases that satisfy the $ch?x$ term. In the top diagram, $ch!$ evaluates to
tt., while $ch?$ to ff.. In this case the values
of $ch$, and $x$ are irrelevant and the behaviour of the term is
simply $wait \wedge keep$.  In a equivalent manner in the bottom
diagram the interval is subdivided in three phases:
\begin{itemize}
\item In the first phase, $ch?$ is $false$, $ch!$ evaluates to $true$,
  so the behaviour is $wait \wedge keep$.
\item Once $ch?$ turns to $true$, we move to the $syn$ phase where
  value on ch is moved to x.
\item The last phase of the behaviour describes, again, the
  continuation sequence.
\end{itemize}

In POE/POE-$\Delta$, the ch?x HCSP term is represented with the
\mybox{ch?x} domain with the semantics: $\llbracket
ch?x \rrbracket \lceil \rceil$.

\paragraph{Value Assignment: y:=x}
The last primitive term, the assignment operation, which is visualized
in Figure \ref{fig:Assignment} simply sets the value of $y$ to the
values of $x$ in the time interval - $[c, d]$
\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/Assignment}
  \caption{Graphical depiction of the Assignment semantics}}
  \label{fig:Assignment}
\end{figure}

The POE/POE-$\Delta$ representation of the Value Assignment term is
\mybox{y := x} domain with the semantics: $\llbracket
y := x\rrbracket \lceil \rceil$.

\paragraph{Building complex terms from primitives}
For scaling up to real live systems, the HCSP primitive terms can be
combined into complex expressions using compositional operators like
sequential and parallel composition, as this is the case in our
example - $ch!5 || (ch?x; y := x)$.  First, let's look at the
sequential operator. In HCSP the sequential operator is defined as
follows:
\[\footnotesize\begin{array}{rcll}
                 \llbracket P; Q \rrbracket C \triangleq \llbracket P \rrbracket(\llbracket Q \rrbracket C)
               \end{array}\]

             The following Figure \ref{fig:Sequence} depicts the
             semantic of the sequence operator. The time interval
             $[c, d]$ is split into two subintervals: $[c, e]$ which
             is assigned to $P$ and $[e, d]$ which is assigned to $Q$,
             where $c < e < d$.  The satisfiability, and thus the
             result of the expression depends on the existence of a
             value $'v'$, for which the first HCSP term returns true
             in it's dedicated subinterval. If such a value exists the
             control flow is passed to the second term and its return
             value is then returned as the return value of the
             composite expression.

\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/Sequence}}
  \caption{Graphical depiction of the sequential operator semantics}
  \label{fig:Sequence}
\end{figure}

The other operator used in the example is the parallel composition
operator, whose semantic is defined as follows:
\[\footnotesize\begin{array}{rcll}
                 \llbracket P || Q \rrbracket  \triangleq && \llbracket P \rrbracket skip \wedge \llbracket Q \rrbracket skip \\
                                                          && \vee \\
                                                          && \llbracket P \rrbracket skip \wedge \llbracket Q \rrbracket {stop}^{Q} \\
                                                          && \vee \\
                                                          && \llbracket P \rrbracket {stop}^{P} \wedge \llbracket Q \rrbracket skip
               \end{array}\]

             Figure \ref{fig:Parallel} visualises that semantic of the
             parallel operator, which given a time interval $[c, d]$
             gives control to both processes $P$, and $Q$.

\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/Parallel}}
  \caption{Graphical depiction of the sequential operator semantics}
  \label{fig:Parallel}
\end{figure}

The POE/POE-$\Delta$ representation of the sequencial and parallel
composition are the sequencial, respectively the parallel HCSP
domains: \mybox{ $\parallel$ }, \mybox{ ; }. 


\paragraph{Application of HCSP in POE/POE-$\Delta$}
As shown in the previous section we use the notion of HCSP unit
domains,to represent each HCSP primitive as a POE/POE-$\Delta$ unit
domain and plot it in a problem diagram. Additionally, we use the
POE/POE-$\Delta$ idea of shared phenomena, represented as arc
annotations to capture information about shared state as well to
coordinate the flow of execution.
Figure \ref{fig:ProblemHCSP} shows a problem diagram representing our
running example from the previous section.

\begin{figure}[hbt]
  \centering{
    \includegraphics[width=0.9\columnwidth]{img/ProblemHCSP}}
  \caption{Graphical representation of the $ch!5 || (ch?x; y := x)$
    example in POE}
  \label{fig:Parallel}
\end{figure}

In the context of HCSP, the original POE/POE-$\Delta$ problem definition: \[E(S)\meets_{G}N\]
which reads ``Find $S$ which, when installed in $E$, meets $N$ to the
satisfaction of $G$.'' can be reinterpreted as:
\[
  \forall v \in \mathcal{V}, i \in \mathcal{I}ntv(E)
  \mathcal{L}([E](S)), v, i = tt.
\]
meaning that for all initial assignments $\mathcal{V}$, and for all
Intervals 'i' which are allowed for E, the interpretation of ([E](S))
in Interval 'i' and with valuation 'v' which evaluate to true satisfy
the need N.

With this reinterpretation, we can use the higher level reasoning capabilities offered by POE/POE-$\Delta$, while remaining fully compatible with the precise and executable semantics of HCSP. The following example motivated by the Inventory Management System from Chaochen's original paper \cite{chaochen1996formal} illustrates this idea. Additionally it builds up on the previously discussed work of Mingshuai Chen, et al \cite{chen2016two} to allow us to take advantage of HCSP's executable semantics during the validation steps of the POE-$\Delta$ process.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{EXAMPLE}
\paragraph{The Kettle Problem}

In the following we introduce a very simple example of a heating kettle with initially only a heating actuator and in a second version also a temperature reading sensor, illustrative of a plant/controller problem as the one presented in Chaochen et al.'s original paper \cite{chaochen1996formal} and depicted graphically in the following Figure \ref{fig:iPlant}.

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.3\textwidth]{img/iPlant}}
  \caption{The Interfaced Plant problem from \cite{chaochen1996formal}}
  \label{fig:iPlant}
\end{figure}

On the basis of this example we demonstrate how Chaochen's HCSP calculus and our POE-$\Delta$ change calculus can be integrated in a hybrid modeling approach by reinterpreting HCSP in terms of real-world phenomena and domains using our previously published work on \textit{Mechanism Description Languages} \cite{hall2017phenomenal}. 

Such a deep semantic integration of the two description systems results in a more formal change framework with executable semantics. Using a Simulink implementation (based on the work of Chen at al. \cite{chen2016two} and kindly made available by Dr. Naijun Zhan\footnote{\url{http://lcs.ios.ac.cn/~znj/}}) of these semantics is then applied to analyze and validate a change scenarios on the presented Kettle example - one where the change intervention involves the addition of an additional sensors as a result of the change ramifications to the rest of the system.

\begin{example}[The original Kettle v1.0 model]
Kettle 'v1.0' is the original version of our old-fashioned heating kettle, which the producing company (and change problem owner) has decided to overhaul and make ready for the IoT world. It is a real-world located device that heats water to approx.~boiling point for brewing tea and coffee. It has only a heating actuator, but no temperature reading sensor. Additionally, the Kettle module is controlled by a software logic, which ensures that once turned on, the kettle heats up water at a rate of approx. 1 $^\circ C/sec$ for the duration of $60 sec.$, after which it automatically turns off. It is described by the following equations:

\[HeaterModule :: \left\langle 
\begin{array}{rcl}
 \dot{e}&=&0\\
\end{array}\right\rangle\]
%
The $HeaterModule$ has only an digital-to-analogue convertor:
\newcommand{\alt}[1]{\left[\!\right]\begin{array}{l}#1\end{array}}
\[KettleModule :: 
(HeaterModule \triangleright ch_{d2a}?e)\]

\end{example}

and the software controller is described by the following logic:


\[SWProgram1.0 ::
\begin{array}{lp{2.5in}} 	
	ch_{d2a}!off;&\% Initial state is off\\
	\mu X.(\texttt{Stop} \trianglerighteq &\% wait for boil  request\\
	\quad			(boilRequest?x ; \\
%	\qquad							u:=on; \\
	\qquad							ch_{d2a}!on;&\% turn heater element on \\
	\qquad							\texttt{Wait}_{60};&\% for 60 seconds\\ 
%	\qquad							u := off; \\
	\qquad							ch_{d2a}!off&\% then turn if off;\\
	\qquad 							X&\% and repeat\\
	\quad			)\\
)
\end{array}\]

%
The whole $Kettle$ is then
%
\[Kettle :: HeaterModule \parallel Kettle :: SWProgram1.0 \models KNeed \]

and can be represented in a POE-$\Delta$ problem diagram as follows:

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.5\textwidth]{img/POE-D_initial}}
  \caption{A Problem Diagram of the initial Kettle}
  \label{fig:iPlant}
\end{figure}

In this original version, the original KNeed is simply:
\begin{itemize}
	\item - KNeed: continuous operation (t is temperature, e is constant on/off)
\end{itemize}

%\begin{figure}[hbt]
%\centering{
%  \includegraphics[width=0.5\textwidth]{img/KettleA}}
%  \caption{A Problem Diagram of the initial Kettle}
%  \label{fig:iPlant}
%\end{figure}

Using our semantic function in combination with the HCSP-Simulink building blocks defined in \cite{chen2016two}, we are able to derive an executable Simulink model of the kettle's behaviour and use it during validation. Figure \ref{fig:SimulinkKettle} shows an aggregated view of the Simulink diagrams describing the kettle:

\begin{figure*}[hbt]
\centering{
  \includegraphics[width=0.9\textwidth]{img/SimulinkKettle}}
  \caption{A Simulink model of the kettle behavior}
  \label{fig:SimulinkKettle}
\end{figure*}

As expected, the simulated kettle behavior demonstrates the following explicit properties:
\begin{itemize}
	\item Water temperature before activating the heating module is at constant ambient temperature of 21\degree C, as modeled in the water element diagram, which can be found on the bottom right corner of the aggregated Simulink Figure.
	\item Once switched on, the kettle heats the water at $1 \degree C / sec$ for the duration of 60sec., which in thE normal case does not allow the kettle to heat up to >100\degree C.
	\item Once switched off the water temperature cools off at a rate of $[(Ambient Temp - Temp)/100]\degree C$
\end{itemize}

A graph of this behavior is show in the following Figure \ref{fig:KettleBehavior}

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.5\textwidth]{img/SimulationResults}}
  \caption{A Graph of the Kettle behavior}
  \label{fig:KettleBehavior}
\end{figure}

%A more thorough testing of the Kettle using a Monte-Carlo simulation, however, reveals some potentially hazardous behavior in cases where the kettle is not given sufficient time to cool off properly between runs. In that case the the temperature can raise to potentially critical ~100\degree C as shown in Figure \ref{fig:KettleHazBehavior}.
%
%\begin{figure}[hbt]
%\centering{
%  \includegraphics[width=0.5\textwidth]{img/hazardous_behv}}
%  \caption{A Graph of a potentially hazardous behavior of the kettle}
%  \label{fig:KettleHazBehavior}
%\end{figure}

\paragraph{The Kettle change problem}
In the following, we will analyze a change introduced by a new IoT-Kettle need, its impact on both designs and how POE-$\Delta$ facilitates the analysis and change process. The additional need is:

\begin{itemize}
	\item $KNeed_New$ - $KN_n1$: WiFi/Bluetooth Connectivity for remote management (e.g. through iPhone app)
\end{itemize}

So the change problem in POE-$\Delta$ is now:
%
\[Kettle :: HeaterModule[Kettle :: SWProgram1.0]\Delta F (WiFi/Bluetooth Module)\models KNeed \land KN_n1 \]
%
and our task to to find $F$, which is a placeholder for the changes required to the Kettle.

\paragraph{Step 1: Change Localization}

The initial step in POE-$\Delta$ - $CPS1$, as explained in section \ref{subsec:poedelta}, involves capturing an initial view of the change problem, and identifying domains that must remain unchanged and such that will change.  

In real life problems, this is usually a multi-step process, which is facilitated by the POE/POE-$\Delta$ process pattern, and involves analyzing the changes to the needs / requirements, and their impact on the current design. While a more detailed example of such an analysis and the tradeoffs which it might require can be found in \cite{doi:10.1002/sres.2533}, in our, relatively simple example, this multi-step process is summarized in a single step as follows: 

During the initial analysis of the problem, the architect identifies that:
\begin{itemize}
	\item the high-level system architecture will need to change to accommodate the WiFi, Bluetooth hardware modules
	\item the Sw. Program v1.0 will need to change to accommodate the control logic necessary to address the new requirement
\end{itemize}

The following POE-$\Delta$ diagram graphically depicts that change:

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.9\columnwidth]{img/POE-D_KettleChange}}
  \caption{Initial Change analysis in POE-$\Delta$}
  \label{fig:changeLocalisation}
\end{figure}


Using either of these low-level executable models (HCSP or Simulink), this initial change design can be formally proven or verified through the use of simulations. In our case this step reveals a serious flow in the design – the introduction of the networking component - \textit{WiFi/Bluetooth Module}, which can be hacked and exploited, we introduce a number of potential safety and security concerns, each of which could compromise the kettle’s safe operation. One such issue is illustrated in the following Figure, which shows how a malicious attack can exploit a design flow in the original kettle when the idle times between runs are too short for the water to cool down sufficiently. 

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.5\textwidth]{img/hazardous_behv}}
  \caption{A Graph of a potentially hazardous behavior of the kettle}
  \label{fig:KettleHazBehavior}
\end{figure}

This issue introduces additional requirements to the new version of the Kettle system:
\begin{itemize}
	\item $KN_n1$: WiFi/Bluetooth Connectivity for remote management (e.g. through iPhone app), which however due to safety / security concerns (e.g. hacker can attack WiFi enabled kettle and make it burn the house), introduces additional requirements:
	\begin{itemize}
		\item $KN_n2$: Guaranteed Safety (t shall not raise $>$ 90\degree Celsius to prevent overheating)
		\item $KN_n3$: Self-learning AI-based security component aimed at determining usual behavior of the devices, and taking countermeasures when behavior starts looking abnormal, e.g. turn off kettle during attacks
	\end{itemize}
\end{itemize}

\paragraph{Step 1a: Change Localization}
At this point we can come back to our high-level POE-$\Delta$ change analysis language, and analyze the new change problem:

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.5\textwidth]{img/changeAnalysis2}}
  \caption{High-level Change Analysis}
  \label{fig:change}
\end{figure}

 In the reminder of this example, we will assume that the three Sub-Problems are cleanly separable and we choose to focus on Sub-Problem2, in order to illustrate the benefits of our approach. The benefits of POE-$\Delta$ in cases where such clean separation between sub-problems is not possible has been described in \cite{doi:10.1002/sres.2533}.

During this step the System Architect identifies that the current $ch_{d2a}!on; Wait60; ch_{d2a}!off$ control logic is where the change will need to be made. In particular the current logic does not include any safety instrumentalization - once on, the KettleModule remains on for a fix amount of time (60 sec) and does not consider any feedback from the temperature sensor regarding the current temperature of the heating module. This in a defective, or hacked unit could result in a safety hazard. The change localization is shown graphically in the following figure, which uses a new graphical notation – combining elements of our high-level POE-$\Delta$ and the low-level HSCP. 
%
\[Kettle :: HeaterModule[Kettle :: SWProgram1.0] \Delta Program[Wait{60}]() \models KNeed+\]
%

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.9\columnwidth]{img/ChangeLocalization}}
  \caption{The change localisation}
  \label{fig:changeLocalisation}
\end{figure}



\paragraph{Step 2: Design for change through the application of the POE$\Delta$ Substitution Pattern}

Once the change has been localized, POE-$\Delta$ guides us also through the changes, including the design and introduction of new components, the removal and change of existing component, and the analysis of the potential ripple effects such changes might have on the rest of the system, for example due to interface incompatibilities. 

In order to satisfy the new requirement, the control logic needs to be able to consider feedback from a temperature sensor in its decision on whether to keep heating up or turning off the heating actuator. As we identified in the previous step, this means that the current module $Wait_{60}$  will need to be replaced with a new module:

\[Sub[Wait_{60} / SefetyPatch]\]

where
\[SafetyPatch := \mu(Wait_{1}, ch_{a2d}?t; Y if t < 90)\]
\\
so that:
\\
\[ 
Kettle :: HeaterModule[Kettle :: SWProgram1.0] \Delta Program[Wait{60} \triangleright \mu(Wait_{1}, ch_{a2d}?t; Y if t < 90]() \models KNeed+
\]

As such the designed new replacement module introduces the need to be able to receive feedback from the $Kettle::HeaterModule$ about its current temperature through a sensor which is currently not part of the Kettle's HW design. In such a way the change introduced to one part of the system ($Kettle :: SWProgram1.0$) has a ripple effect and requires the introduction of a cascading change to another part of the system - in this case a new sensor for temperature reading - $ch_{a2d}!t$ in the $Kettle :: HeaterModule$. This is indicated in the Figure \ref{fig:changeB} by the color coding. 

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.90\columnwidth]{img/KettleChange_B.png}}
  \caption{The change to $Kettle$ 'B' and its implications}
  \label{fig:changeB}
\end{figure}


Such cascading changes are a common phenomenon in change problem of real-life complexity. The ability of $POE-\Delta$ to explore the interdependent nature of change sub-problems which extend beyond the scope of the system, but also in the environment and to support the change engineer in the solutions co-design is one of its main advantages compared to classical problem decomposition approach of divide and conquer.


\paragraph{Step 3: Validating the change design}
For the purpose of validation, we use again our previously introduced executable model of the kettle behavior, adapt it according to the just designed change and use its simulation ability during validation.

To identify the building blocks, which need changing in the Simulink model easier, we used Stateflow's build-in report functionality which extends Simulink's default Print Details report. It provides the ability to generate HTML reports of the entire Simulink mode. The generated raw report represents the different model elements and connections in a table form (see Figure \ref{fig:RawModelReport}) which is very helpful in quickly identifying the necessary changes. To additionally support the usability of this approach, we applied some transformation in order to further compact and summarize the information. The resulting report, which can be seen in Figure \ref{fig:finalReport} was embedded in our POE-$\Delta$ framework in order to localize and perform the changes in the model necessary to make the Kettle Simulation conform with the changed Kettle from the previous step. 

\begin{figure*}[hbt]
\centering{
  \includegraphics[width=0.9\textwidth]{img/RawSimulinkModelReport}}
  \caption{Excerpt of the Raw HTML Simulink Report}
  \label{fig:RawModelReport}
\end{figure*}

\begin{figure*}[hbt]
\centering{
%  \includegraphics[width=0.9\textwidth]{img/FinalSimulinkModelReport}}
  \includegraphics[width=0.9\textwidth]{img/finalReport}}
  \caption{Excerpt of the application of POE-$\Delta$ on the Modified Simulink Report}
  \label{fig:finalReport}
\end{figure*}

A graph of the behavior of the changed Kattle design according to the new Simulink model is show in the following Figure \ref{fig:ChangedKettleBehavior} \todo[inline]{shouldn't the kettle keep the heat on until we reach 90 degree Centigrade?}.

\begin{figure}[hbt]
\centering{
  \includegraphics[width=0.90\columnwidth]{img/ChangedBehviour}}
  \caption{The simulated behavior of the changed kettle.}
  \label{fig:ChangedKettleBehavior}
\end{figure}

The success of the validation step, in particular in problems of non-trivial complexity is not guaranteed. Often the validation fails and the change analysis steps needs to re-trace. Of particular difficulty for the test designer is the necessity to understand the runtime impact the POE-$\Delta$  changes might introduce. The existence of an executable Simulink model derived through the integration of POE-$\Delta$ and HCSP was a significant step towards addressing this problem, since now the runtime behavior of the system can simulated and directly observed.


After a successful validation,. he last remaining step for satisfying the change requirement involves the actual change realization, which comprises two separate phases - the decommissioning of the old system and the commissioning of the new system. This 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{CONCLUSION}
\begin{itemize}
    \item Concluding Statement
    Through the proposed integration of POE-$\Delta$ - the high-level change design calculus and a low-level formalism with executable semantics – in this case HCSP, we can enable a seamless transition between different abstraction levels in the context of the overall change process. The resulting approach provides a systematic way for representing and analyzing technical changes, pinpointing the exact intervention necessary in the system, but also showing its potential impact to the rest of the system as well as to the incorporating environment at a high level, while at the same time enabling the automatic validation of the high-level changes by means of a semantic mapping of POE-$\Delta$ to an executable formalism. Using a Simulink implementation  of these semantics is then applied to analyze and validate a change scenarios on the presented Kettle example - one where the change intervention involves the discovery of new requirements and the addition of an additional sensors as a result of the change ramifications to the rest of the system.
    \item Next Steps
\end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section*{APPENDIX}
Diagrams and larger graphics??

\section*{ACKNOWLEDGEMENT}
Naijun Zhan - http://lcs.ios.ac.cn/~znj/ for sharing the original implementation

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\begin{thebibliography}{99}
%\bibitem{c1} citation.
%\end{thebibliography}
% ---------------------------------------------------------------------
% BIBLIOGRAPHY
% ---------------------------------------------------------------------
\frenchspacing 
\inputencoding{utf8}
\bibliographystyle{ieeetr}
\bibliography{bibliography}

\end{document}